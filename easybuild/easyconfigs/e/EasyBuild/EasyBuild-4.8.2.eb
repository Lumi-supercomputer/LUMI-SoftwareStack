easyblock = 'EB_EasyBuildMetaLUMI'

local_LUMI_version =        '23.09'

name =    'EasyBuild'
version = '4.8.2'

homepage = 'https://easybuilders.github.io/easybuild'

whatis = [
    "Description: EasyBuild is a software build and installation framework written in Python that allows you to install software in a structured, repeatable and robust way."
]

description = """
EasyBuild is a software build and installation framework
written in Python that allows you to install software in a structured,
repeatable and robust way.
"""

usage = """
See the documentation on readthedocs. Only the documentation of the latest
version is readily available.

The EasyBuild module on LUMI should be used through the EasyBuild-user or
EasyBuild-production modules. These modules ensure that EasyBuild is properly
configured to install software on LUMI.
  * Installing software that is common to all partitions: First load the
    appropriate LUMI software stack module and the hidden partition/common module
    and then load either EasyBuild-user or EasyBuild-production (the latter for
    system managers only) module.
  * Installing software for a specific partition works in the same way, but then
    by loading the appropriate partition module. It is best to compile software on
    a node of that partition as cross-compiling may not always work as some packages
    have the nasty habit to add compiler options that conflict with the requirements
    of cross-compiling.
"""

docurls = [
    "Web-based documentation on https://easybuild.readthedocs.io/"
]

toolchain = SYSTEM

source_urls = [
    # easybuild-framework
    'https://files.pythonhosted.org/packages/e5/40/17e4ddbe7aa160e67219a90c7c4f67baa4b0efc3a6c21ab0e2c858af8f4e/',
    # easybuild-easyblocks
    'https://files.pythonhosted.org/packages/85/07/e59231a6f4a90f6bd7c24c9c3b923469024ab0072af95dac9409624796d1/',
    # easybuild-easyconfigs
    'https://files.pythonhosted.org/packages/4b/1e/27f7d6785b35978ebb70a518bb1ea699ace8d05395c902a6d518de8590bb/',
]

sources = [
    'easybuild-framework-%(version)s.tar.gz',
    'easybuild-easyblocks-%(version)s.tar.gz',
    'easybuild-easyconfigs-%(version)s.tar.gz',
]

patches = [
    'EasyBuild-4.4.2_keyring_DBus.patch',
]

checksums = [
    {'easybuild-framework-4.8.2.tar.gz':   '87852289d099aed18e6778c556d8aed173ab1ff711c20e7d9ad32803336b3610'},
    {'easybuild-easyblocks-4.8.2.tar.gz':  '796ba8268e2832c6cb78c681401ce401f4d3a6471e1407a3987e76e6f42b3fd7'},
    {'easybuild-easyconfigs-4.8.2.tar.gz': 'c191b09f68cc3a0be33d248edfb892a143424af119f6ae6fd076c7880343cd63'},
]

# order matters a lot, to avoid having dependencies auto-resolved (--no-deps easy_install option doesn't work?)
# EasyBuild is a (set of) Python packages, so it depends on Python
# usually, we want to use the system Python, so no actual Python dependency is listed
allow_system_deps = [('Python', SYS_PYTHON_VERSION)]

local_pyshortver = '.'.join(SYS_PYTHON_VERSION.split('.')[:2])

exts_defaultclass = 'PythonPackage'
exts_filter = ("python3 -c 'import %(ext_name)s'", '')
exts_default_options = {
    'download_dep_fail': True,
    'sanity_pip_check':  False,
    'source_urls':       [PYPI_SOURCE],
    'use_pip':           False,
}

exts_list = [
    ('click',             '7.1.2',    {}), # archspec 0.1.3 is incompatible with more recent versions of click
    ('archspec',          '0.1.3',    {}),
    ('colorama',          '0.4.4',    {}),
    ('commonmark',        '0.9.1',    {}),
    ('dataclasses',       '0.8',      {}),
    ('Pygments',          '2.11.2',   {}),
    ('typing_extensions', '3.10.0.2', {}), # The 4.0.x versions did not install, maybe due to the lack of pip?
    ('rich',              '11.2.0',   {}),
]

sanity_check_paths = {
    'files': ['bin/eb'],
    'dirs':  ['lib/python%s/site-packages' % local_pyshortver],
}

# Set Python 3 for EasyBuild
modextravars = {
    'EB_PYTHON': 'python3',
}

moduleclass = 'tools'

modluafooter= f"""
if not ( isloaded("EasyBuild-tools/{local_LUMI_version}") ) then
    try_load("EasyBuild-tools/{local_LUMI_version}")
end
"""
